Representation/Data structures used in the solution submitted for the Egg Carton Puzzle:
	The board is stored as a two-dimensional array of integers, where a 0 indicates an empty slot, a 1 indicates a slot occupied by an egg, and a 2 indicates that a slot is empty but cannot hold an egg due to it being collinear to K or more slots with eggs in them.
	The coordinates of all the eggs on the board are kept in a list because of reasons. With this list, M, N and K a state could be considered complete.

	Given an M, N and K (optionally also a list of coordinates for eggs) a board is created and filled with eggs until there are no more empty slots on the board.
	The solution will never place an egg in a way that would break the constraints of the puzzle. This is accomplished by traversing all the board's rows, column and diagonals and counting the amount of eggs in each of these. Any column, row or diagonal found to have K eggs in it is then "blocked" (by setting all the empty slots to 2 in the grid).
	
The Objective Function:
	Uhm. 1-(1/(2*E)) where E is the number of eggs in place on the board.
	This function was chosen because it seemed to work alright. And considering that the solution never produces an invalid state, we don't have to worry about this function giving a higher score to invalid solutions than valid ones. All we have to consider is the number of eggs in place. Well, we could have considered the arrangement of the eggs as well but I mean if you're going to do that you might as well just write an algorithm for solving the problem yourself.
	The fact that we do not know how to identify an optimal solution for a given variant of this puzzle means that our objective function cannot ever return 1.0. 

Neighbour generation:
	Some number of neighbours is generated. For the puzzle variants presented in the exercise we went with this number being 8. This seems to have worked out OK.
	Neighbours are generated by removing a randomly selected egg from the board and then placing eggs in random, empty slots.
	By only removing one egg, we will always be able to place at least one egg in the new state. This means that the solution will never wander away from an optimal solution (although we do not know what an optimal solution looks like for a given M, N and K).