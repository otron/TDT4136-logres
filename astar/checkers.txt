Notes:
The largest K the system can handle is... well, any. It starts to slow down at around K=54, which takes about 15200ms to find a solution for. (See checkers_K.txt)
Also it can't handle K<6 BECAUSE OF REASONS.

1.
	The initial state for a puzzle of size K (where K is even) is a one-dimensional "board" of size K+1 where the K/2 leftmost slots are occupied by checkers of some type (denoted by 1) and the K/2 rightmost slots are occupied by checkers of some other type (denoted by 2). The middle slot is empty (denoted by 0).
	Example for K = 3:
		1110222

2.
	A goal state is an inversion of the initial state. That is to say one where the K/2 leftmost slots are occupied by checkers of some other type while the K/2 rightmost slots are occupied by checkers of some type.
	Example for K = 3:
		2220111

3.
	The arc cost between two nodes is a constant 0.2. This is because of reasons discussed in the A* paper (at the end, the part with the linear checkers problem). I have summarized those reasons below.
	"For the 25-Checkers problem using a heuristic function based on Manhattan distance, some experimentation shows that a constant arc cost of between 0.05 and 0.2 gives best result."

4.
	The heuristic function returns the sum of each checker-piece's manhattan distance from the goal.
	If it finds a mis-matching piece (between the node's state and the goal's state) it adds the distance from the piece to where it's supposed to be according to the goal state to the sum. The code is included below. A drawback of this is that this is very similar to evaluating whether or not a node is a goal state (if the value returned by the heuristic evaluation is 0, then the node is a goal state). But oh well!
		int[] temp = node.board.clone();
		for (int i = 0; i < goal.length; i++) {
			if (goal[i] != temp[i])
				if (temp[i] == 1)
					res += goal.length - 1 - i;
				if (temp[i] == 2)
					res+= i;
		node.h = res;

5.
	There are, in any given state of this puzzle, a maximum of four legal moves, depending on where the empty space is.
	The legal moves are:
		Move the piece to the right of the empty space into the empty space.
		Move the piece to the left of the empty space into the empty space.
		Move the piece two spaces right of the empty space into the empty space (this is a "jump")
		Move the piece two spaces left of the empty space into the empty space (this is a "jump")
	Successor states are generated by applying these four moves, if possible, to a node. Of course, if the empty space is located in the right- or leftmost slot the number of available moves becomes is reduced to two. If the empty space is in the slot next to the right- or leftmost slot, the number of available moves becomes three.

6.
	The solution for K=6 is not optimal. I know this because it is possible to solve this in 15 moves (the exercise says so). However, my implementation does find a solution for K=52 in less than 10 seconds which is alright. You've got to sacrifice accuracy for efficiency in these things, that's what A* is all about right? :)


17 deep solution found for K = 6 after 23 expansions in 3ms with arcCost=0.2
1110222 => 1101222 => 1121022 => 1120122 => 1021122 => 0121122 => 2101122 => 2110122 => 2112102 => 2112120 => 2112021 => 2102121 => 2012121 => 2210121 => 2212101 => 2212011 => 2202111

59 deep solution found for K = 12 after 98 expansions in 19ms with arcCost=0.2
1111110222222 => 1111101222222 => 1111121022222 => 1111120122222 => 1111021122222 => 1110121122222 => 1112101122222 => 1112011122222 => 1102111122222 => 1012111122222 => 1210111122222 => 1201111122222 => 0211111122222 => 2011111122222 => 2101111122222 => 2111011122222 => 2111110122222 => 2111112102222 => 2111112120222 => 2111112021222 => 2111102121222 => 2111012121222 => 2111210121222 => 2111212101222 => 2111212121022 => 2111212121202 => 2111212120212 => 2111212122012 => 2111212122210 => 2111212122201 => 2111212120221 => 2111212021221 => 2111202121221 => 2110212121221 => 2101212121221 => 2121012121221 => 2121210121221 => 2121212101221 => 2121212121021 => 2121212121201 => 2121212120211 => 2121212021211 => 2121202121211 => 2120212121211 => 2021212121211 => 2201212121211 => 2221012121211 => 2221210121211 => 2221212101211 => 2221212121011 => 2221212120111 => 2221212021111 => 2221202121111 => 2220212121111 => 2222012121111 => 2222210121111 => 2222212101111 => 2222212011111 => 2222202111111

233 deep solution found for K = 24 after 841 expansions in 54ms with arcCost=0.2
1111111111110222222222222 => 1111111111101222222222222 => 1111111111121022222222222 => 1111111111120122222222222 => 1111111111021122222222222 => 1111111110121122222222222 => 1111111112101122222222222 => 1111111112011122222222222 => 1111111102111122222222222 => 1111111012111122222222222 => 1111111210111122222222222 => 1111111201111122222222222 => 1111110211111122222222222 => 1111101211111122222222222 => 1111121011111122222222222 => 1111120111111122222222222 => 1111021111111122222222222 => 1110121111111122222222222 => 1112101111111122222222222 => 1112011111111122222222222 => 1102111111111122222222222 => 1012111111111122222222222 => 1210111111111122222222222 => 1201111111111122222222222 => 0211111111111122222222222 => 2011111111111122222222222 => 2101111111111122222222222 => 2111011111111122222222222 => 2111110111111122222222222 => 2111111101111122222222222 => 2111111111011122222222222 => 2111111111110122222222222 => 2111111111112102222222222 => 2111111111112120222222222 => 2111111111112021222222222 => 2111111111102121222222222 => 2111111111012121222222222 => 2111111111210121222222222 => 2111111111212101222222222 => 2111111111212121022222222 => 2111111111212121202222222 => 2111111111212120212222222 => 2111111111212122012222222 => 2111111111212122210222222 => 2111111111212122212022222 => 2111111111212122202122222 => 2111111111212122220122222 => 2111111111212122222102222 => 2111111111212122222120222 => 2111111111212122222021222 => 2111111111212122222201222 => 2111111111212122222221022 => 2111111111212122222221202 => 2111111111212122222220212 => 2111111111212122222222012 => 2111111111212122222222210 => 2111111111212122222222201 => 2111111111212122222220221 => 2111111111212122222022221 => 2111111111212122202222221 => 2111111111212120222222221 => 2111111111212021222222221 => 2111111111202121222222221 => 2111111110212121222222221 => 2111111101212121222222221 => 2111111121012121222222221 => 2111111121210121222222221 => 2111111121212101222222221 => 2111111121212121022222221 => 2111111121212121202222221 => 2111111121212120212222221 => 2111111121212122012222221 => 2111111121212122210222221 => 2111111121212122212022221 => 2111111121212122202122221 => 2111111121212122220122221 => 2111111121212122222102221 => 2111111121212122222120221 => 2111111121212122222021221 => 2111111121212122222201221 => 2111111121212122222221021 => 2111111121212122222221201 => 2111111121212122222220211 => 2111111121212122222022211 => 2111111121212122202222211 => 2111111121212120222222211 => 2111111121212021222222211 => 2111111121202121222222211 => 2111111120212121222222211 => 2111111021212121222222211 => 2111110121212121222222211 => 2111112101212121222222211 => 2111112121012121222222211 => 2111112121210121222222211 => 2111112121212101222222211 => 2111112121212121022222211 => 2111112121212121202222211 => 2111112121212120212222211 => 2111112121212122012222211 => 2111112121212122210222211 => 2111112121212122212022211 => 2111112121212122202122211 => 2111112121212122220122211 => 2111112121212122222102211 => 2111112121212122222120211 => 2111112121212122222021211 => 2111112121212122222201211 => 2111112121212122222221011 => 2111112121212122222220111 => 2111112121212122222022111 => 2111112121212122202222111 => 2111112121212120222222111 => 2111112121212021222222111 => 2111112121202121222222111 => 2111112120212121222222111 => 2111112021212121222222111 => 2111102121212121222222111 => 2111012121212121222222111 => 2111210121212121222222111 => 2111212101212121222222111 => 2111212121012121222222111 => 2111212121210121222222111 => 2111212121212101222222111 => 2111212121212121022222111 => 2111212121212121202222111 => 2111212121212120212222111 => 2111212121212122012222111 => 2111212121212122210222111 => 2111212121212122212022111 => 2111212121212122202122111 => 2111212121212122220122111 => 2111212121212122222102111 => 2111212121212122222120111 => 2111212121212122222021111 => 2111212121212122202221111 => 2111212121212120222221111 => 2111212121212021222221111 => 2111212121202121222221111 => 2111212120212121222221111 => 2111212021212121222221111 => 2111202121212121222221111 => 2110212121212121222221111 => 2101212121212121222221111 => 2121012121212121222221111 => 2121210121212121222221111 => 2121212101212121222221111 => 2121212121012121222221111 => 2121212121210121222221111 => 2121212121212101222221111 => 2121212121212121022221111 => 2121212121212121202221111 => 2121212121212120212221111 => 2121212121212122012221111 => 2121212121212122210221111 => 2121212121212122212021111 => 2121212121212122202121111 => 2121212121212122220121111 => 2121212121212122222101111 => 2121212121212122222011111 => 2121212121212122202211111 => 2121212121212120222211111 => 2121212121212021222211111 => 2121212121202121222211111 => 2121212120212121222211111 => 2121212021212121222211111 => 2121202121212121222211111 => 2120212121212121222211111 => 2021212121212121222211111 => 2201212121212121222211111 => 2221012121212121222211111 => 2221210121212121222211111 => 2221212101212121222211111 => 2221212121012121222211111 => 2221212121210121222211111 => 2221212121212101222211111 => 2221212121212121022211111 => 2221212121212121202211111 => 2221212121212120212211111 => 2221212121212122012211111 => 2221212121212122210211111 => 2221212121212122212011111 => 2221212121212122202111111 => 2221212121212120222111111 => 2221212121212021222111111 => 2221212121202121222111111 => 2221212120212121222111111 => 2221212021212121222111111 => 2221202121212121222111111 => 2220212121212121222111111 => 2222012121212121222111111 => 2222210121212121222111111 => 2222212101212121222111111 => 2222212121012121222111111 => 2222212121210121222111111 => 2222212121212101222111111 => 2222212121212121022111111 => 2222212121212121202111111 => 2222212121212120212111111 => 2222212121212122012111111 => 2222212121212122210111111 => 2222212121212122201111111 => 2222212121212120221111111 => 2222212121212021221111111 => 2222212121202121221111111 => 2222212120212121221111111 => 2222212021212121221111111 => 2222202121212121221111111 => 2222220121212121221111111 => 2222222101212121221111111 => 2222222121012121221111111 => 2222222121210121221111111 => 2222222121212101221111111 => 2222222121212121021111111 => 2222222121212121201111111 => 2222222121212120211111111 => 2222222121212021211111111 => 2222222121202121211111111 => 2222222120212121211111111 => 2222222021212121211111111 => 2222222201212121211111111 => 2222222221012121211111111 => 2222222221210121211111111 => 2222222221212101211111111 => 2222222221212121011111111 => 2222222221212120111111111 => 2222222221212021111111111 => 2222222221202121111111111 => 2222222220212121111111111 => 2222222222012121111111111 => 2222222222210121111111111 => 2222222222212101111111111 => 2222222222212011111111111 => 2222222222202111111111111
